<?php

define('ADVANCEDQUEUE_UI_GROUP_UNDEFINED', 'Undefined');

require_once 'includes/advancedqueue_ui.actions.inc';

/**
 * Implements hook_entity_info_alter().
 */
function advancedqueue_ui_entity_info_alter(&$entity_info) {
  // Display all properties on the queue item view page.
  $entity_info['advancedqueue_item']['extra fields controller class'] = 'EntityDefaultExtraFieldsController';
}

/**
 * Implements hook_permission().
 */
function advancedqueue_ui_permission() {
  return array(
    'advancedqueue_ui view queues' => array(
      'title' => t('View queues'),
      'description' => t('Allow users to access Advanced Queue UI pages to view queues and queue items.'),
    ),
    'advancedqueue_ui manage queues' => array(
      'title' => t('Manage queues'),
      'description' => t('Allow users to perform actions on queues and queue items.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function advancedqueue_ui_menu() {
  $items = array();

  $items['admin/structure/queues'] = array(
    'title' => 'Queues',
    'description' => 'View and manage Advanced Queue queues and items.',
    'page callback' => 'advancedqueue_ui_queue_list',
    'access arguments' => array('advancedqueue_ui view queues'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/advancedqueue_ui.pages.inc',
  );

  $items['admin/structure/queues/list'] = array(
    'title' => 'Queues',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/structure/queues/all'] = array(
    'title' => 'Items',
    'page callback' => 'advancedqueue_ui_queue_items',
    'page arguments' => array(3),
    'access arguments' => array('advancedqueue_ui view queues'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/advancedqueue_ui.pages.inc',
    'weight' => 1,
  );

  $items['admin/structure/queues/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure settings for the Advanced Queue module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advancedqueue_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'advancedqueue.admin.inc',
    'file path' => drupal_get_path('module', 'advancedqueue'),
    'weight' => 10,
  );

  $items['admin/structure/queues/%'] = array(
    'title callback' => 'advancedqueue_ui_queue_items_title',
    'title arguments' => array(3),
    'page callback' => 'advancedqueue_ui_queue_items',
    'page arguments' => array(3),
    'access arguments' => array('advancedqueue_ui view queues'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/advancedqueue_ui.pages.inc',
  );

  $items['admin/structure/queues/%/items'] = array(
    'title' => 'Items',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  if (module_exists('devel')) {
    $items['admin/structure/queues/%/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'advancedqueue_ui_queue_devel',
      'page arguments' => array(3),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'includes/advancedqueue_ui.pages.inc',
      'weight' => 100,
    );
  }

  $items['admin/structure/queues/%/process'] = array(
    'title' => 'Process',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advancedqueue_ui_queue_process_confirm', 3),
    'access arguments' => array('advancedqueue_ui manage queues'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/advancedqueue_ui.pages.inc',
  );

  $items['admin/structure/queues/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advancedqueue_ui_queue_delete_confirm', 3),
    'access arguments' => array('advancedqueue_ui manage queues'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/advancedqueue_ui.pages.inc',
  );

  $items['admin/structure/queues/%/%'] = array(
    'title callback' => 'advancedqueue_ui_item_view_title',
    'title arguments' => array(4),
    'page callback' => 'advancedqueue_ui_item_view',
    'page arguments' => array(4),
    'access arguments' => array('advancedqueue_ui view queues'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/advancedqueue_ui.pages.inc',
  );

  $items['admin/structure/queues/%/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  if (module_exists('devel')) {
    $items['admin/structure/queues/%/%/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'advancedqueue_ui_item_devel',
      'page arguments' => array(4),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'includes/advancedqueue_ui.pages.inc',
      'weight' => 100,
    );
  }

  return $items;
}

/**
 * Implements hook_views_api().
 */
function advancedqueue_ui_views_api() {
  return array(
    'api' => 3,
    'version' => '3.0',
    'path' => drupal_get_path('module', 'advancedqueue_ui') . '/includes/views',
  );
}

/**
 * Returns all advancedqueue queues grouped by their 'group' property.
 *
 * @return array
 *   An array of all advancedqueue queues grouped by their 'group' property.
 */
function advancedqueue_ui_queues_by_group() {
  $queues = advancedqueue_get_queues_info();
  ksort($queues);

  // Group queues by their 'group' property.
  $queues_by_group = array();
  foreach ($queues as $queue_name => $queue_info) {
    $group = isset($queue_info['group']) ? $queue_info['group'] : 'Ungrouped';
    $queues_by_group[$group][$queue_name] = $queue_info;
  }
  ksort($queues_by_group);

  // Add undefined queues at the end.
  if (variable_get('advancedqueue_ui_show_undefined_queues', FALSE)) {
    if ($result = db_query('SELECT DISTINCT name FROM {advancedqueue} WHERE name NOT IN (:names) ORDER BY name', array(':names' => array_keys($queues)))->fetchCol()) {
      foreach ($result as $result_item) {
        $queues_by_group[ADVANCEDQUEUE_UI_GROUP_UNDEFINED][$result_item] = array('group' => ADVANCEDQUEUE_UI_GROUP_UNDEFINED);
      }
    }
  }

  return $queues_by_group;
}

/**
 * Loads the queue item.
 *
 * @param int $item_id
 *   ID of the queue item to load.
 *
 * @return object|null
 *   A loaded queue item, or null if not found.
 */
function advancedqueue_ui_item_load($item_id) {
  $item = db_select('advancedqueue', 'aq')
    ->fields('aq')
    ->condition('item_id', $item_id, '=')
    ->execute()
    ->fetch();

  if (!empty($item->data)) {
    $item->data = unserialize($item->data);
  }

  return $item;
}

/**
 * Implements hook_form_FORM_ID_alter() for views_exposed_form().
 *
 * Updates form #action URL (by default pointing to site base_url, as the
 * advancedqueue_ui form is embedded from advancedqueue_ui_queue_items().
 *
 * @see advancedqueue_ui_queue_items()
 */
function advancedqueue_ui_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form_state['view']->name == 'advancedqueue_ui') {
    $form['#action'] = '/' . current_path();

    // Display some filters together in one column.
    $form['item_id_key']['#prefix'] = '<div class="filter-group">';
    $form['item_title_tag']['#suffix'] = '</div>';

    $form['name']['#prefix'] = '<div>';
    $form['status']['#suffix'] = '</div>';

    $form['item_data_result']['#prefix'] = '<div>';
    $form['items_per_page']['#suffix'] = '</div>';

    // On Queue items page displaying items for all queues, we also have an
    // additional 'Queue name' filter shows, which should be put in the same
    // filter column as 'Item ID/key' and 'Item title/tag'.
    if ($form_state['view']->args[0] == 'all') {
      $form['name_machine_name']['#prefix'] = '<div class="filter-group">';
      $form['item_title_tag']['#suffix'] .= '</div>';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for views_form_advancedqueue_ui_default().
 *
 * Updates form #action URL (by default pointing to site base_url, as the
 * advancedqueue_ui form is embedded from advancedqueue_ui_queue_items().
 *
 * Also temporarily sets view's override_url to make sure that batch processing
 * returns to the same URL it started from.
 *
 * @see advancedqueue_ui_queue_items()
 */
function advancedqueue_ui_form_views_form_advancedqueue_ui_default_alter(&$form, &$form_state) {
  if ($form_state['build_info']['args'][0]->name == 'advancedqueue_ui') {
    $form['#action'] = request_uri();
    $form_state['build_info']['args'][0]->override_url = current_path();
  }
}

/**
 * Logs a message to the watchdog and displays it to the user.
 *
 * @param string $message
 *   A message to log and display.
 * @param object $item
 *   An advancedqueue_item the message relates to.
 * @param string $type
 *   Optional type of message to log and display.
 *   Should be either 'status' or 'error'.
 */
function advancedqueue_ui_log_message($message, $item, $type = 'status') {
  $variables = array('%item_id' => $item->item_id, '%queue_name' => $item->name);
  watchdog('advancedqueue_ui', $message, $variables, $type == 'status' ? WATCHDOG_INFO : WATCHDOG_ERROR);
  drupal_set_message(t($message, $variables), $type);
}

/**
 * Implements hook_form_FORM_ID_alter() for advancedqueue_settings_form().
 *
 * @see advancedqueue_settings_form()
 */
function advancedqueue_ui_form_advancedqueue_settings_form_alter(&$form, &$form_state, $form_id) {
  $form['advancedqueue_ui'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Queue UI settings'),
    '#collapsible' => TRUE,
  );
  $form['advancedqueue_ui']['advancedqueue_ui_show_undefined_queues'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show undefined queues'),
    '#description' => t('Enabling this option will also show all these queues that are not defined by <code>hook_advanced_queue_info()</code> implementations (for example <em>Update</em> and <em>Views Bulk Operations</em> module queues) in the %undefined_group_name group.', array('%undefined_group_name' => ADVANCEDQUEUE_UI_GROUP_UNDEFINED)),
    '#default_value' => variable_get('advancedqueue_ui_show_undefined_queues', FALSE),
  );
}
